{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green106\blue93;\red31\green31\blue36;\red255\green255\blue255;
\red108\green121\blue134;\red146\green161\blue177;\red252\green95\blue163;\red65\green161\blue192;\red208\green168\blue255;
\red161\green103\blue230;\red161\green103\blue230;\red208\green168\blue255;\red158\green241\blue221;\red208\green191\blue105;
\red158\green241\blue221;\red103\green183\blue164;}
{\*\expandedcolortbl;;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c57255\c63137\c69412;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81569\c65882\c100000;
\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c62145\c94386\c86819;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c61961\c94510\c86667;\csgenericrgb\c40538\c71705\c64209;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Here is the json file which contain  country list along with its dial code and country code as international standard.\
\
Note: For reading and parsing json we need to install pod \'93
\f1\fs32 \cf2 \cb3 SwiftyJSON
\f0\fs24 \cf0 \cb1 \'94\
\
\
Following is the code for read json:\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f1\fs32 \cf4 \cb3  \cf5 //MARK:\cf6  ======== Custom Methods ==============\cf4 \
    \cf7 func\cf4  \cf8 readCode\cf4 ()\{\
        \cf7 if\cf4  \cf7 let\cf4  path = \cf9 Bundle\cf4 .\cf10 main\cf4 .\cf11 path\cf4 (forResource: \cf2 "CountryCodes"\cf4 , ofType: \cf2 "json"\cf4 ) \{\
            \cf7 do\cf4  \{\
                \cf7 let\cf4  data = \cf7 try\cf4  \cf12 Data\cf4 (contentsOf: \cf12 URL\cf4 (fileURLWithPath: path), options: .\cf10 alwaysMapped\cf4 )\
                \cf7 let\cf4  jsonObj = \cf7 try\cf4  \cf13 JSON\cf4 (data: data)\
                \cf11 print\cf4 (\cf2 "jsonData:\cf4 \\(jsonObj)\cf2 "\cf4 )\
                \cf7 for\cf4  i \cf7 in\cf4  \cf14 0\cf11 ..<\cf4 jsonObj.\cf10 count\cf4 \{\
                    \cf7 let\cf4  json = \cf13 JSON\cf4 (jsonObj[i])\
                    \cf7 let\cf4  obj : \cf15 ObjCountryCode\cf4  = \cf15 ObjCountryCode\cf4 .\cf15 init\cf4 (json: json)\
                    \
                    \cf7 self\cf4 .\cf16 codeArray\cf4 .\cf11 append\cf4 (obj)\
                    \
                \}\
                \cf11 print\cf4 (\cf2 "=====>code Array:"\cf4 ,\cf7 self\cf4 .\cf16 codeArray\cf4 .\cf10 count\cf4 )\
                \
            \} \cf7 catch\cf4  \cf7 let\cf4  error \{\
                \cf11 print\cf4 (\cf2 "parse error: \cf4 \\(error.\cf10 localizedDescription\cf4 )\cf2 "\cf4 )\
            \}\
        \} \cf7 else\cf4  \{\
            \cf11 print\cf4 (\cf2 "Invalid filename/path."\cf4 )\
        \}\
        \
    \}}